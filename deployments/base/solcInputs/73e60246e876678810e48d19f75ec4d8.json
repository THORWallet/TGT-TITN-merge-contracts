{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/TitnVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./interfaces/IERC20.sol\";\n\ninterface ITITNERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\ncontract TitnVesting {\n    ITITNERC20Metadata private _titnContract;\n    address private _owner;\n    uint256 private _vestedBalance;\n    uint64 public _startTimestamp;\n    uint64 public _vestingDuration;\n\n    mapping(address => VestingParams) private _vesting;\n\n    struct VestingParams {\n        //96bit are enough: max value is 1000000000000000000000000000\n        //96bit are:                    79228162514264337593543950336\n        uint96 vestingAmount;\n        //64bit for timestamp in seconds lasts 584 billion years\n        uint64 vestingDuration;\n        //how much vested funds were already claimed\n        uint96 vestingClaimed;\n    }\n\n    event Vested(address indexed account, uint96 amount, uint64 vestingDuration);\n    event TransferOwner(address indexed owner);\n    event SetStartTimestamp(uint64 startTimestamp);\n    event Claim(address indexed account, uint96 amount);\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"Vesting: not the owner\");\n        _;\n    }\n\n    constructor(address titnContract, uint64 startTimestamp, uint64 vestingDuration) {\n        _owner = msg.sender;\n        _titnContract = ITITNERC20Metadata(titnContract);\n        _startTimestamp = startTimestamp;\n        _vestingDuration = vestingDuration;\n    }\n\n    function transferOwner(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Vesting: transfer owner the zero address\");\n        require(newOwner != address(this), \"Vesting: transfer owner to this contract\");\n\n        _owner = newOwner;\n        emit TransferOwner(newOwner);\n    }\n\n    function setStartTimestamp(uint64 startTimestamp) public virtual onlyOwner {\n        require(block.timestamp < _startTimestamp, \"Vesting: existing start timestamp has already been reached\");\n        require(block.timestamp < startTimestamp, \"Vesting: can only set a start timestamp in the future\");\n\n        _startTimestamp = startTimestamp;\n        emit SetStartTimestamp(startTimestamp);\n    }\n\n    function vest(address[] calldata accounts, uint96[] calldata amounts) public virtual onlyOwner {\n        require(accounts.length == amounts.length, \"Vesting: accounts and amounts length must match\");\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            //only vest those accounts that are not yet vested. We dont want to merge vestings\n            if (_vesting[accounts[i]].vestingAmount == 0) {\n                _vestedBalance += amounts[i];\n                _vesting[accounts[i]] = VestingParams(amounts[i], _vestingDuration, 0);\n                emit Vested(accounts[i], amounts[i], _vestingDuration);\n            }\n        }\n        require(\n            _vestedBalance <= _titnContract.balanceOf(address(this)),\n            \"Vesting: not enough tokens in this contract for vesting\"\n        );\n    }\n\n    function canClaim(address vested) public view virtual returns (uint256) {\n        if (block.timestamp <= _startTimestamp || _startTimestamp == 0) {\n            return 0;\n        }\n        VestingParams memory v = _vesting[vested];\n        return claimableAmount(v);\n    }\n\n    function claimableAmount(VestingParams memory v) internal view virtual returns (uint256) {\n        uint256 currentDuration = block.timestamp - _startTimestamp;\n\n        uint256 unlockedFunds = 0;\n        if (v.vestingDuration < currentDuration) {\n            //we can give all of it, vesting time passed, otherwise we see a div by zero\n            unlockedFunds = v.vestingAmount;\n        } else {\n            unlockedFunds = (v.vestingAmount * currentDuration) / v.vestingDuration;\n        }\n        return unlockedFunds - v.vestingClaimed;\n    }\n\n    function vestedBalance() public view virtual returns (uint256) {\n        return _vestedBalance;\n    }\n\n    function vestedBalanceOf(address vested) public view virtual returns (uint256) {\n        VestingParams memory v = _vesting[vested];\n        return v.vestingAmount - v.vestingClaimed;\n    }\n\n    function claim(address to, uint96 amount) public virtual {\n        require(block.timestamp > _startTimestamp, \"Vesting: timestamp now or in the past?\");\n        require(_startTimestamp != 0, \"Vesting: contract not live yet\");\n        require(to != address(0), \"Vesting: transfer from the zero address\");\n        require(to != address(this), \"Vesting: sender is this contract\");\n        require(to != address(_titnContract), \"Vesting: sender is _titnContract contract\");\n\n        VestingParams storage v = _vesting[msg.sender];\n\n        require(amount <= claimableAmount(v), \"TITN: cannot transfer vested funds\");\n\n        v.vestingClaimed += amount;\n        _vestedBalance -= amount;\n        _titnContract.transfer(to, amount);\n        emit Claim(to, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}