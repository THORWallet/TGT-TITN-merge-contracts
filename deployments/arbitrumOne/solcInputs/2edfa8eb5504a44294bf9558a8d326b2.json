{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/ITokenMessenger.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface ITokenMessenger {\n    event DepositForBurn(\n        uint64 indexed nonce,\n        address indexed burnToken,\n        uint256 amount,\n        address indexed depositor,\n        bytes32 mintRecipient,\n        uint32 destinationDomain,\n        bytes32 destinationTokenMessenger,\n        bytes32 destinationCaller\n    );\n\n    event MintAndWithdraw(\n        address indexed mintRecipient,\n        uint256 amount,\n        address indexed mintToken\n    );\n\n    event RemoteTokenMessengerAdded(uint32 domain, bytes32 tokenMessenger);\n    event RemoteTokenMessengerRemoved(uint32 domain, bytes32 tokenMessenger);\n    event LocalMinterAdded(address localMinter);\n    event LocalMinterRemoved(address localMinter);\n\n    function depositForBurn(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken\n    ) external returns (uint64 _nonce);\n\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce);\n\n    function replaceDepositForBurn(\n        bytes calldata originalMessage,\n        bytes calldata originalAttestation,\n        bytes32 newDestinationCaller,\n        bytes32 newMintRecipient\n    ) external;\n\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    ) external returns (bool);\n\n    function addRemoteTokenMessenger(uint32 domain, bytes32 tokenMessenger) external;\n    function removeRemoteTokenMessenger(uint32 domain) external;\n    function addLocalMinter(address newLocalMinter) external;\n    function removeLocalMinter() external;\n}"
    },
    "contracts/USDCBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./interfaces/ITokenMessenger.sol\";\n\ninterface IUSDC {\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n\ncontract USDCBridge {\n    address public immutable usdc;\n    ITokenMessenger public circleTokenMessenger;\n    uint32 public immutable destinationDomain; // e.g., Base = 1650553709\n    address public destinationCaller; // target contract on Base\n    address public owner;\n\n    event BridgeInitiated(address indexed recipient, address indexed from, uint256 amount);\n    event DestinationCallerUpdated(address indexed newDestinationCaller);\n    event OwnerUpdated(address indexed newOwner);\n    event EmergencyWithdrawal(address indexed owner, uint256 usdcAmount, uint256 ethAmount);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not authorized\");\n        _;\n    }\n\n    constructor(address _usdc, address _circleTokenMessenger, uint32 _destinationDomain, address _destinationCaller) {\n        usdc = _usdc;\n        destinationDomain = _destinationDomain;\n        destinationCaller = _destinationCaller;\n        owner = msg.sender;\n        circleTokenMessenger = ITokenMessenger(_circleTokenMessenger);\n    }\n\n    function bridgeUSDC() external onlyOwner {\n        uint256 amount = IUSDC(usdc).balanceOf(address(this));\n        require(amount > 0, \"No USDC to bridge\");\n\n        // Approve USDC to be burned by the protocol\n        IUSDC(usdc).approve(address(circleTokenMessenger), IUSDC(usdc).balanceOf(address(this)));\n\n        circleTokenMessenger.depositForBurn(\n            amount,\n            destinationDomain,\n            bytes32(uint256(uint160(destinationCaller))),\n            usdc\n        );\n\n        emit BridgeInitiated(destinationCaller, msg.sender, amount);\n    }\n\n    function setDestinationCaller(address _newDestinationCaller) external onlyOwner {\n        require(_newDestinationCaller != address(0), \"Invalid address\");\n        destinationCaller = _newDestinationCaller;\n        emit DestinationCallerUpdated(_newDestinationCaller);\n    }\n\n    function setOwner(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0), \"Invalid owner address\");\n        owner = _newOwner;\n        emit OwnerUpdated(_newOwner);\n    }\n\n    function emergencyWithdraw() external onlyOwner {\n        uint256 usdcBalance = IUSDC(usdc).balanceOf(address(this));\n        uint256 ethBalance = address(this).balance;\n\n        if (usdcBalance > 0) {\n            require(IUSDC(usdc).transfer(owner, usdcBalance), \"USDC transfer failed\");\n        }\n\n        if (ethBalance > 0) {\n            (bool success, ) = payable(owner).call{ value: ethBalance }(\"\");\n            require(success, \"ETH transfer failed\");\n        }\n\n        emit EmergencyWithdrawal(owner, usdcBalance, ethBalance);\n    }\n\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}